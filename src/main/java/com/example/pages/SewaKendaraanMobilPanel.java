/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.pages;

import com.example.GlobalContext;
import com.example.service.VehicleService;
import com.example.model.Vehicle;
import com.example.model.VehicleRentalCustomer;
import com.example.service.VehicleRentalCustomerService;
import com.example.utils.CustomResult;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.lang.Integer;
import java.util.List;
import java.util.Locale;

/**
 *
 * @author ripsc
 */
public class SewaKendaraanMobilPanel extends javax.swing.JPanel {
    private HomePelangganFrame homePelangganFrame;
    private final VehicleService vehicleService = new VehicleService();
    private final VehicleRentalCustomerService vehicleRentalCustomerService = new VehicleRentalCustomerService();
    private int vehicleId;

    /**
     * Creates new form SewaKendaraanMotorPanel
     */
    public SewaKendaraanMobilPanel(HomePelangganFrame homePelangganFrame, int vehicleId) {
        
        initComponents();
        
//        lamaSewaInput.setInputVerifier(new InputVerifier() {
//            @Override
//            public boolean verify(JComponent input) {
//                JTextField textField = (JTextField) input;
//                String text = textField.getText();
//                try {
//                    Integer.parseInt(text); // Memeriksa apakah input adalah integer
//                    return true; // Valid
//                } catch (NumberFormatException e) {
//                    JOptionPane.showMessageDialog(null, "Lama Sewa Harus Berisi Angka.", "Input Tidak Valid", JOptionPane.ERROR_MESSAGE);
//                    return false; // Tidak valid
//                }
//            }
//        });
        
        lamaSewaInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateLabel();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateLabel();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Biasanya tidak digunakan untuk teks biasa
            }

            // Metode helper untuk memperbarui label
            private void updateLabel() {
                String valueString = lamaSewaInput.getText().trim(); // Ambil input dan bersihkan whitespace
                int value = 0; // Nilai default

                // Validasi input: pastikan hanya angka
                if (!valueString.isEmpty()) {
                    if (valueString.matches("\\d+")) { // Memastikan hanya angka
                        try {
                            value = Integer.parseInt(valueString); // Konversi ke integer
                        } catch (NumberFormatException e) {
                            value = 0; // Tetapkan ke 0 jika gagal parsing
                        }
                    } else {
                        value = 0; // Tetapkan ke 0 jika input mengandung karakter non-numerik
                    }
                }

                // Mendapatkan tanggal saat ini
                LocalDate currentDate = LocalDate.now();

                // Menambahkan hari sesuai nilai input
                LocalDate futureDate = currentDate.plusDays(value);

                // Format tanggal
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM yyyy", new Locale("id", "ID"));

                // Perbarui label tanggal pengembalian kendaraan
                tanggalPengembalianKendaraan.setText(futureDate.format(formatter));
            }
        });
        
        this.homePelangganFrame = homePelangganFrame;
        this.vehicleId = vehicleId;
        
        Vehicle vehicle = vehicleService.getById(vehicleId);
        if (vehicle != null) {
            brandInput.setText(vehicle.getBrand());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        brandLabel = new javax.swing.JLabel();
        brandLabel1 = new javax.swing.JLabel();
        lamaSewaInput = new javax.swing.JTextField();
        brandInput = new javax.swing.JTextField();
        buttonSewa = new javax.swing.JButton();
        buttonKembali = new javax.swing.JButton();
        brandLabel2 = new javax.swing.JLabel();
        tanggalPengembalianKendaraan = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Sewa Kendaraan Motor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(jLabel1, gridBagConstraints);

        brandLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        brandLabel.setText("Brand :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(brandLabel, gridBagConstraints);

        brandLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        brandLabel1.setText("Lama Sewa (Hari) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(brandLabel1, gridBagConstraints);

        lamaSewaInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lamaSewaInput.setText("3");
        lamaSewaInput.setToolTipText("Masukan lama hari sewa kamu");
        lamaSewaInput.setMinimumSize(new java.awt.Dimension(300, 30));
        lamaSewaInput.setPreferredSize(new java.awt.Dimension(300, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(lamaSewaInput, gridBagConstraints);

        brandInput.setEditable(false);
        brandInput.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        brandInput.setToolTipText("Nama brand kendaraan");
        brandInput.setFocusable(false);
        brandInput.setMinimumSize(new java.awt.Dimension(300, 30));
        brandInput.setPreferredSize(new java.awt.Dimension(300, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(brandInput, gridBagConstraints);

        buttonSewa.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        buttonSewa.setText("Sewa");
        buttonSewa.setMaximumSize(new java.awt.Dimension(300, 30));
        buttonSewa.setMinimumSize(new java.awt.Dimension(300, 30));
        buttonSewa.setPreferredSize(new java.awt.Dimension(300, 30));
        buttonSewa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSewaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        add(buttonSewa, gridBagConstraints);

        buttonKembali.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        buttonKembali.setText("Kembali");
        buttonKembali.setMaximumSize(new java.awt.Dimension(100, 30));
        buttonKembali.setMinimumSize(new java.awt.Dimension(100, 30));
        buttonKembali.setPreferredSize(new java.awt.Dimension(100, 30));
        buttonKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonKembaliActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 50, 0);
        add(buttonKembali, gridBagConstraints);

        brandLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        brandLabel2.setText("Tanggal Pengembalian Kendaraan :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(brandLabel2, gridBagConstraints);

        tanggalPengembalianKendaraan.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tanggalPengembalianKendaraan.setText("20 Februari 2025");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(tanggalPengembalianKendaraan, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonKembaliActionPerformed
        homePelangganFrame.changeMainContent(new MobilTersediaPanel(homePelangganFrame));
    }//GEN-LAST:event_buttonKembaliActionPerformed

    private void buttonSewaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSewaActionPerformed
        String dateString = tanggalPengembalianKendaraan.getText();
        int userLoginId = GlobalContext.getUserId();
        
        // Formatter untuk parsing input (dengan Locale Indonesia)
        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("d MMMM yyyy", new Locale("id", "ID"));

        // Formatter untuk format output
        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        try {
            // Parsing input ke LocalDate
            LocalDate date = LocalDate.parse(dateString, inputFormatter);

            // Format ulang ke format tujuan
//            String formattedDate = date.format(outputFormatter);
            List<VehicleRentalCustomer> daftarRental = vehicleRentalCustomerService.getAllRentalWithVehicleDetailsByUserId(userLoginId);
            if (daftarRental.size() >= 2) {
                JOptionPane.showMessageDialog(this, "Kamu hanya dapat menyewa 2 kendaraan", "Oops", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            VehicleRentalCustomer newVehicleRentalCustomer = new VehicleRentalCustomer();
            newVehicleRentalCustomer.setUserId(userLoginId);
            newVehicleRentalCustomer.setVehicleId(vehicleId);
            newVehicleRentalCustomer.setTanggalPengembalian(date);

            CustomResult result = vehicleService.createRental(newVehicleRentalCustomer);
            if (result.isSuccess()) {
                JOptionPane.showMessageDialog(this, result.getMessage());
                KendaraanYangKamuSewaPanel kendaraanYangKamuSewaPanel = new KendaraanYangKamuSewaPanel(homePelangganFrame);
                homePelangganFrame.changeMainContent(kendaraanYangKamuSewaPanel);
            } else {
                JOptionPane.showMessageDialog(this, result.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("Gagal mem-parsing tanggal: " + e.getMessage());
        }
    }//GEN-LAST:event_buttonSewaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField brandInput;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JLabel brandLabel1;
    private javax.swing.JLabel brandLabel2;
    private javax.swing.JButton buttonKembali;
    private javax.swing.JButton buttonSewa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField lamaSewaInput;
    private javax.swing.JLabel tanggalPengembalianKendaraan;
    // End of variables declaration//GEN-END:variables
}
